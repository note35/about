{"version":3,"sources":["MyBox.tsx","MenuItems.tsx","Navigator.tsx","About.tsx","Talks.tsx","Toys.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MyBox","prefix","color","useParams","tColor","Box","clone","Button","variant","MenuItems","useStyles","makeStyles","theme","grow","flexGrow","sectionDesktop","display","breakpoints","up","sectionMobile","Navigator","classes","React","useState","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMobileMenuOpen","Boolean","className","AppBar","position","Toolbar","map","item","key","name","to","path","IconButton","aria-label","Badge","icon","text","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","anchorEl","anchorOrigin","vertical","horizontal","id","keepMounted","transformOrigin","open","onClose","MenuItem","About","Talks","Toys","App","exact","children","window","location","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.49b11841.chunk.js","sourcesContent":["import React from \"react\"\nimport { useParams } from \"react-router-dom\"\n\nimport Box from \"@material-ui/core/Box\"\nimport Button from \"@material-ui/core/Button\"\n\nexport type MyBoxProps = {\n    prefix: string\n}\n\nexport function MyBox({ prefix }: MyBoxProps): JSX.Element {\n  const { color }: {color: \"default\"|\"inherit\"|\"primary\"|\"secondary\"} = useParams()\n\n  const tColor = `text.${color}`\n\n  return (\n    <Box color={tColor} clone>\n      <Button variant=\"contained\" color={color}>\n        {prefix}-{color}\n      </Button>\n    </Box>\n  )\n}\n","import React from \"react\"\nimport InfoIcon from \"@material-ui/icons/Info\"\nimport RecordVoiceOverIcon from \"@material-ui/icons/RecordVoiceOver\"\nimport SportsEsportsIcon from \"@material-ui/icons/SportsEsports\"\n\nexport const MenuItems = [{\n  \"name\": \"about\",\n  \"text\": \"About\",\n  \"icon\": <InfoIcon />,\n  \"path\": \"/\"\n}, {\n  \"name\": \"talks\",\n  \"text\": \"Talks\",\n  \"icon\": <RecordVoiceOverIcon />,\n  \"path\": \"/talks\"\n}, {\n  \"name\": \"toys\",\n  \"text\": \"Toys\",\n  \"icon\": <SportsEsportsIcon />,\n  \"path\": \"/toys\"\n}]\n","import React from \"react\"\nimport { Link } from \"react-router-dom\"\n\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Badge from \"@material-ui/core/Badge\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport Menu from \"@material-ui/core/Menu\"\nimport MenuIcon from \"@material-ui/icons/Menu\"\n\nimport \"./Navigator.css\"\nimport { MenuItems } from \"./MenuItems\"\n\nconst useStyles = makeStyles(theme => ({\n  grow: {\n    flexGrow: 1,\n  },\n  sectionDesktop: {\n    display: \"none\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"flex\",\n    },\n  },\n  sectionMobile: {\n    display: \"flex\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"none\",\n    },\n  },\n}))\n\nexport function Navigator(): JSX.Element {\n  const classes = useStyles()\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null)\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl)\n  const mobileMenuId = \"navigator-mobile\"\n\n  const handleMobileMenuClose = () => { setMobileMoreAnchorEl(null) }\n\n  const handleMobileMenuOpen = (event: any) => { setMobileMoreAnchorEl(event.currentTarget) }\n\n  return (\n    <div className={classes.grow}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <div className={classes.grow} />\n\n          <div className={classes.sectionDesktop}>\n            { MenuItems.map(item => {\n              return (\n                <Link key={item.name} className=\"disable-default\" to={item.path}>\n                  <IconButton aria-label={item.name} color=\"inherit\">\n                    <Badge color=\"secondary\">\n                      {item.icon}\n                    </Badge>\n                  </IconButton>\n                  {item.text}\n                </Link>\n              )\n            })}\n          </div>\n\n          <div className={classes.sectionMobile}>\n            <IconButton\n              aria-label=\"show more\"\n              aria-controls={mobileMenuId}\n              aria-haspopup=\"true\"\n              onClick={handleMobileMenuOpen}\n              color=\"inherit\"\n            >\n              <MenuIcon />\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n\n      <Menu\n        anchorEl={mobileMoreAnchorEl}\n        anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n        id={mobileMenuId}\n        keepMounted\n        transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n        open={isMobileMenuOpen}\n        onClose={handleMobileMenuClose}\n      >\n        { MenuItems.map(item => {\n          return (\n            <MenuItem key={item.name}>\n              <Link className=\"disable-default\" to={item.path}>\n                <IconButton aria-label={item.name} color=\"inherit\">\n                  <Badge color=\"secondary\">\n                    {item.icon}\n                  </Badge>\n                </IconButton>\n                {item.text}\n              </Link>\n            </MenuItem>\n          )\n        })}\n      </Menu>\n    </div>\n  )\n}\n","import React from \"react\"\n\nexport function About(): JSX.Element {\n  const text = \"I'm Kir.\"\n\n  return (\n    <div>{text}</div>\n  )\n}\n","import React from \"react\"\n\nexport function Talks(): JSX.Element {\n  const text = \"A list of my presentations.\"\n\n  return (\n    <div>{text}</div>\n  )\n}\n","import React from \"react\"\n\nexport function Toys(): JSX.Element {\n  const text = \"A list of my toys.\"\n\n  return (\n    <div>{text}</div>\n  )\n}\n","/* eslint react/no-children-prop: 0 */\nimport React from \"react\"\nimport { Switch, Route } from \"react-router-dom\"\nimport \"./App.css\"\n\nimport { MyBox } from \"./MyBox\"\n\nimport { Navigator } from \"./Navigator\"\nimport { About } from \"./About\"\nimport { Talks } from \"./Talks\"\nimport { Toys } from \"./Toys\"\n\nexport function App(): JSX.Element {\n  return (\n    <div className=\"App\">\n      <Navigator />\n      <Switch>\n        <Route exact path=\"/\" children={<About />} />\n        <Route path=\"/talks\" children={<Talks />} />\n        <Route path=\"/toys\" children={<Toys />} />\n        <Route path=\"/:color\" children={<MyBox prefix=\"test\"/>} />\n        <Route children={<div>home</div>} />\n      </Switch>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport \"./index.css\"\nimport { App } from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename=\"/about\">\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}